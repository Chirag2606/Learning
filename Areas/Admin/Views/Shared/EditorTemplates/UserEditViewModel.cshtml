@using Cyara.Domain.Types.Roles
@using Cyara.Shared.Extensions
@using Cyara.Shared.Web.Authorisation
@using Cyara.Shared.Web.Extensions
@using Cyara.Shared.Web.Types.Constants
@using Cyara.Web.Common.Extensions
@using Cyara.Web.Portal
@using Cyara.Web.Portal.Areas.Admin.Extensions
@using Cyara.Web.Resources
@model Cyara.Web.Portal.Areas.Admin.Models.UserEditViewModel

@helper RoleCheckbox(IList<Cyara.Web.Portal.Areas.Admin.Models.UserRoleViewData> listOfRoles, string namePrefix, string roleName)
{
    var role = listOfRoles.First(x => x.Value == roleName);
    var roleIndex = listOfRoles.IndexOf(role);
    namePrefix = namePrefix + "[" + @roleIndex + "].";
    <text>
        <td>
            <label class="checkbox">
                @Html.Hidden(namePrefix + "Value", role.Value)
                @Html.Hidden(namePrefix + "Name", role.Name)
                @Html.Hidden(namePrefix + "Category", role.Category)
                @Html.CheckBox(namePrefix + "Selected", role.Selected, role.ReadOnly ? new { disabled = "disabled" } : null)
                @Html.Label(namePrefix + "Selected", role.Name)
            </label>
        </td>
    </text>
}

<div class="form-head">
    <div class="pull-right form-head-info">
        <div class="switch switch-large" data-on="success" data-off="danger" data-on-label="@Html.GlobalResource("Active").ToUpper()" data-off-label="@Html.GlobalResource("Inactive").ToUpper()">
            @Html.CheckBoxFor(m => m.Active)
        </div>
    </div>
    <h2>@Html.Resource("SubHeading1")</h2>
</div>
<div class="form-body">
    <div class="row-fluid limit">
        <div class="control-group span4">
            @Html.LabelForWithRequired(m => m.FirstName, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(m => m.FirstName)
                @Html.ValidationMessageFor(m => m.FirstName)
            </div>
        </div>
        <div class="control-group span4">
            @Html.LabelForWithRequired(m => m.LastName, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(m => m.LastName)
                @Html.ValidationMessageFor(m => m.LastName)
            </div>
        </div>
    </div>
    <div class="row-fluid limit">
        <div class="control-group span4">
            @Html.LabelForWithRequired(m => m.Telephone, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(m => m.Telephone)
                @Html.ValidationMessageFor(m => m.Telephone)
            </div>
        </div>
        <div class="control-group span4">
            @Html.LabelFor(m => m.Mobile, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(m => m.Mobile)
                @Html.ValidationMessageFor(m => m.Mobile)
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.LabelForWithRequired(m => m.Email, new { @class = "control-label" })
        <div class="controls">
            @Html.RenderConditional(
                Model.CanEditEmail,
                Html.TextBoxFor(m => m.Email, new { @class = "input-largedouble" }),
                Html.TextBoxFor(m => m.Email, new { @class = "input-largedouble", @readonly = "readonly" }))
            @Html.ValidationMessageFor(m => m.Email)
        </div>
        @if (Model.EmailConfirmed.HasValue)
        {
            <div class="controls">
                <label class="checkbox">
                    @Html.CheckBox(Html.NameFor(m => m.EmailConfirmed).ToString(), Model.EmailConfirmed)
                    @Html.LabelFor(m => m.EmailConfirmed)
                </label>
            </div>
        }
        </div>
    </div>

@* User roles section *@
<div class="form-subhead">
    <h2>@Html.Resource("SubHeading2")</h2>
</div>
<div class="form-body">
    @Html.HiddenFor(m => m.LoginProvider)
    <div class="control-group">
        @Html.LabelForWithRequired(m => m.Username, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.Username, Model.EditMode && !Model.LoginProvider.CanEditUsername() ? new { disabled = "disabled" } : null)
            @Html.Tooltip(Html.Resource(Model.LoginProvider.UsernameTooltip()), Html.GlobalResource("TipLabel"))
            @Html.ValidationMessageFor(m => m.Username)
            <div id="UserFound" class="error-panel-hidden">@Messages.ADUser_NotFound</div>
        </div>
    </div>

    @* New Roles Types (encorporates existing platform level roles) *@
    <div class="control-group top-gap-small">
        @Html.LabelFor(m => m.AccountLevelRoles, new { @class = "control-label emphasise-big" })
        <div class="controls">
            <table id="role-categories-grid" class="table table-striped-on-dark-background table-content-vertical-align">
                <colgroup>
                    <col style="width: 15%;" />
                    <col style="width: 5%;" />
                    <col style="width: 20%;" />
                    <col style="width: 20%;" />
                    <col style="width: 20%;" />
                    <col style="width: 5px;" />
                </colgroup>
                <tbody>
                    @{
                        var categories = new List<string>();
                        if (Model.PlatformLevelRoles != null && Model.PlatformLevelRoles.Any())
                        {
                            categories.Add(StaticCategories.Platform);
                        }

                        categories.AddRange(StaticCategories.NewAccountCategories);

                        foreach (var category in categories)
                        {
                            <tr>
                                <td style="background-color: #EEEEEE;"><b>@Html.Resource(category)</b></td>
                                <td style="background-color: #EEEEEE;">
                                    @if (category != StaticCategories.Platform)
                                    {
                                        <div class="btn btn-div-icon-more js-category-button" data-category="@category" tabindex="0">
                                            <i></i>
                                        </div>
                                    }
                                </td>
                                @{
                                    var roleNames = StaticCategories.GetRolesForCategory(category);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if (roleNames.Length > i)
                                        {
                                            <text>
                                                @if (category == StaticCategories.Platform)
                                                {
                                                    @RoleCheckbox(Model.PlatformLevelRoles, "PlatformLevelRoles", roleNames[i])
                                                }
                                                else
                                                {
                                                    @RoleCheckbox(Model.AccountLevelRoles, "AccountLevelRoles", roleNames[i])
                                                }
                                            </text>
                                        }
                                        else
                                        {
                                            <text>
                                                <td></td>
                                            </text>
                                        }
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <script>
        $('.js-category-button').on('click',
            function(e) {
                var t = $(e.currentTarget).data("category");
                $.ajax({
                    url: '@Url.Action("UserRolesAccess")',
                    data: JSON.stringify({ category: t }),
                    contentType: "application/json;charset=utf-8",
                    type: "POST",
                    success: $.proxy(function(data) {
                        if (data && data.category && $.isArray(data.roles) && $.isArray(data.accessForRoles)) {
                            var modal = new ModalPopup({
                                cssClasses: 'wider taller',
                                keyboard: false,
                                header: '@Html.Resource("UserRolesPerCategoryHeader").ToJavascriptSafeString()'.replace('{0}', data.category),
                                bodyMarkup: tmpl('popupUserRolesAccess', data),
                                showPrimary: false,
                                showCancel: true,
                                cancelButton: '@Html.GlobalResource("Close")',
                                messageHtml: "",
                                beforeShow: $.proxy(function () {
                                    var rolesAccessGrid = new AjaxGrid({
                                        dataSource: data.accessForRoles,
                                        table: '#template-roles-access-table',
                                        totalPages: 1,
                                        collectionSize: data.accessForRoles.length,
                                        pageSize: 200,
                                        pageNumber: 1,
                                        rowTemplate: 'template-roles-access-row',
                                        recordLabel: '',
                                        autoClickLink: false,
                                        showRecordPageLinks: false,
                                        noStateInStorage: true,
                                        paginated: false
                                    });
                                }, this)
                            });
                        }
                    })
                });
            });

        //open dialog on Enter key press
        $('.js-category-button').keyup(function(event) {
            if (event.keyCode == 13) {
                var currentTarget = event.target;
                currentTarget.click();
            }
        });
    </script>

    <script id="popupUserRolesAccess" type="text/x-tmpl">
        <span>{%=o.header %}</span>
        <br />
        <br />
        <table id="template-roles-access-table" class="table truncated table-striped">
            <colgroup>
                <col style="width:250px;" />
                <col style="width:250px;" />
                <col style="width:{%= o.roles.length > 0 && o.roles[0] ? 'auto' : '0' %}" />
                <col style="width:{%= o.roles.length > 1 && o.roles[1] ? 'auto' : '0' %}" />
                <col style="width:{%= o.roles.length > 2 && o.roles[2] ? 'auto' : '0' %}" />
                <col style="width:{%= o.roles.length > 3 && o.roles[3] ? 'auto' : '0' %}" />
            </colgroup>
            <thead>
                <tr>
                    <th>Cyara Entities</th>
                    <th>Functions</th>
                    <th style="text-align: center;">{%=o.roles.length > 0 ? o.roles[0] : '' %}</th>
                    <th style="text-align: center;">{%=o.roles.length > 1 ? o.roles[1] : '' %}</th>
                    <th style="text-align: center;">{%=o.roles.length > 2 ? o.roles[2] : '' %}</th>
                    <th style="text-align: center;">{%=o.roles.length > 3 ? o.roles[3] : '' %}</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </script>

    <script id="template-roles-access-row" type="text/x-tmpl">
        <tr class="{%=o.area ? '' : 'no-top-border' %}">
            <td style="background-color: #EEEEEE;"><b>{%=o.area %}</b></td>
            <td>{%=o.access %}</td>
            <td style="text-align: center;"> <i class="{%=(o.roleHasAccess.length > 0) ? (o.roleHasAccess[0].canAccess ? 'green-tick-icon' : 'grey-cross-icon') : '' %}"></i></tdtext-align:>
            <td style="text-align: center;"> <i class="{%=(o.roleHasAccess.length > 1) ? (o.roleHasAccess[1].canAccess ? 'green-tick-icon' : 'grey-cross-icon') : '' %}"></i></td>
            <td style="text-align: center;"> <i class="{%=(o.roleHasAccess.length > 2) ? (o.roleHasAccess[2].canAccess ? 'green-tick-icon' : 'grey-cross-icon') : '' %}"></i></td>
            <td style="text-align: center;"> <i class="{%=(o.roleHasAccess.length > 3) ? (o.roleHasAccess[3].canAccess ? 'green-tick-icon' : 'grey-cross-icon') : '' %}"></i></td>
        </tr>
    </script>

    <div class="control-group top-gap-small">
        @Html.LabelFor(m => m.LegacyAccountLevelRoles, new { @class = "control-label emphasise" })
        @Html.Resource("LegacyAccountLevelRolesNote")
        <div class="controls">
            <table id="role-legacy-categories-grid" class="table table-content-vertical-align-not-bordered">
                <tbody>
                    <tr>
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.Admin)
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.ExecutiveDashboard)
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.CCMAdmin)
                    </tr>
                    <tr>
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.Billing)
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.DashboardAdmin)
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.CCMReporting)
                    </tr>
                    <tr>
                        @RoleCheckbox(Model.LegacyAccountLevelRoles, "LegacyAccountLevelRoles", StaticRoles.Reporting)
                        <td></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <button type="button" class="btn btn-primary js-view-privileges">@Html.Resource("ViewPrivilegesButton")</button>

    <script>
        $('.js-view-privileges').on('click',
            function(e) {
                var form = $(e.target).closest('form');
                var serializedForm = form.serialize();

                $.ajax({
                    url: '@Url.Action("ViewAssignedPrivileges")',
                    data: serializedForm,
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    success: $.proxy(function(data) {
                        if (data && $.isArray(data.accessForRoles)) {
                            var modal = new ModalPopup({
                                cssClasses: 'wide taller',
                                keyboard: false,
                                header: '@Html.Resource("ViewPrivilegesHeader").ToJavascriptSafeString()',
                                bodyMarkup: tmpl('popupUserPrivileges', data),
                                showPrimary: false,
                                showCancel: true,
                                cancelButton: '@Html.GlobalResource("Close")',
                                messageHtml: "", @*'@Html.Resource("ViewPrivilegesText").ToJavascriptSafeString()'.replace('{0}', data.user).replace('{1}', data.category),*@
                                beforeShow: $.proxy(function () {
                                    var rolesAccessGrid = new AjaxGrid({
                                        dataSource: data.accessForRoles,
                                        table: '#template-assigned-privileges-table',
                                        totalPages: 1,
                                        collectionSize: data.accessForRoles.length,
                                        pageSize: 200,
                                        pageNumber: 1,
                                        rowTemplate: 'template-assigned-privileges-row',
                                        recordLabel: '',
                                        autoClickLink: false,
                                        showRecordPageLinks: false,
                                        noStateInStorage: true,
                                        paginated: false
                                    });
                                }, this)
                            });
                        }
                    })
                });

            });
    </script>

    <script id="popupUserPrivileges" type="text/x-tmpl">
        <span>{%=o.header %}</span>
        <br />
        <br />
        <table id="template-assigned-privileges-table" class="table truncated table-striped">
            <colgroup>
                <col style="width:250px;" />
                <col style="width:250px;" />
                <col style="width:40px;" />
            </colgroup>
            <thead>
                <tr>
                    <th>Cyara Entities</th>
                    <th>Functions</th>
                    <th style="text-align: center;"></th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

    </script>

    <script id="template-assigned-privileges-row" type="text/x-tmpl">
        <tr class="{%=o.area ? '' : 'no-top-border' %}">
            <td style="background-color: #EEEEEE;"><b>{%=o.area %}</b></td>
            <td>{%=o.access %}</td>
            <td style="text-align: center;"> <i class="{%=(o.roleHasAccess.length > 0) ? (o.roleHasAccess[0].canAccess ? 'green-tick-icon' : 'grey-cross-icon') : '' %}"></i></tdtext-align:>
        </tr>
    </script>
</div>


<div class="form-subhead">
    <h2>@Html.Resource("SubHeading5")</h2>
</div>

<div class="form-body form-horizontal wide-labels">
    <div class="control-group">
        @Html.LabelFor(m => m.Notifications.PlatformNotifications, new { @class = "control-label" })
        <div class="controls">
            <div class="switch switch-medium has-switch" data-on="success" data-off="danger" data-on-label="@Html.GlobalResource("Yes").ToUpper()" data-off-label="@Html.GlobalResource("No").ToUpper()">
                @Html.CheckBoxFor(m => m.Notifications.PlatformNotifications)
            </div>
        </div>
    </div>
</div>

<script id="template-account-row" type="text/x-tmpl">
    <tr data-accountid="{%= o.id %}">
        <td>
            {% if (o.isActive == false) { %}
            <span class="label label-important">@Html.GlobalResource("Inactive")</span>
            {% } %}
        </td>
        <td>{%= o.id %}</td>
        <td class="delete-label">{%= o.name %}</td>
    </tr>
</script>

@if (Model.EditMode && Model.Accounts != null)
{
    <div class="form-grid">
        <div class="pull-right">
            <a class="btn attach-account" href="#">@Html.Resource("AttachAccountButton")</a>
        </div>

        <h2>@Html.Resource("SubHeading3")</h2>

        <table id="accountsgrid" class="table table-striped table-hover finger">
            <colgroup>
                <col style="width: 5%" />
                <col style="width: 25%" />
                <col style="width: 70%" />
            </colgroup>
            <thead>
                <tr>
                    <th></th>
                    <th data-sort="id" data-type="int"><a href="#">@Html.GlobalResource("TableHeading_AccountId")</a></th>
                    <th data-sort="name"><a href="#">@Html.GlobalResource("TableHeading_AccountName")</a></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <script id="template-attach-account-popup" type="text/x-tmpl">

        <table id="attachAccountGrid" class="table truncated table-striped table-hover finger" style="width:700px">
            <colgroup>
                <col style="width: 15%" />
                <col style="width: 85%" />
            </colgroup>
            <thead>
                <tr>
                    <th data-sort="@Columns.AccountId"><a href="#">@Html.GlobalResource("TableHeading_AccountId")</a></th>
                    <th data-sort="@Columns.AccountName"><a href="#">@Html.GlobalResource("TableHeading_AccountName")</a></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </script>

    <script id="template-attach-account-row" type="text/x-tmpl">
        <tr data-accountId="{%= o.accountId %}">
            <td class="truncate" title="{%= o.accountId %}">{%= o.accountId %}</td>
            <td class="truncate js-name" title="{%= o.name %}">{%= o.name %}</td>
        </tr>
    </script>
}

@if (Model.EditMode && Model.LoginProvider.AllowsPasswordReset() && Html.HasAccess(ResourceType.UserPassword, AccessType.Update))
{
    <div class="form-subhead">
        <div class="pull-right form-head-info">
            <div id="ResetPasswordDiv" class="switch switch-large" data-on="success" data-off="danger" data-on-label="@Html.GlobalResource("Active").ToUpper()" data-off-label="@Html.GlobalResource("Inactive").ToUpper()">
                @Html.CheckBoxFor(m => m.ResetPassword)
            </div>
        </div>
        <h2>@Html.Resource("SubHeading4")</h2>
    </div>

    <div class="form-body resetPasswordGroup">
        <div class="control-group">
            @Html.LabelForWithRequired(m => m.Password, new { @class = "control-label" })
            <div class="controls">
                @{
                    var pwdHtmlAttribs = new Dictionary<string, object>
                                                                {
                        { "autocomplete", "off"}
                    };
                    if (!Model.ResetPassword)
                    {
                        pwdHtmlAttribs["disabled"] = "disabled";
                    }
                }
                @Html.PasswordFor(m => m.Password, pwdHtmlAttribs)
                @Html.ValidationMessageFor(m => m.Password)
            </div>
        </div>
        <div class="control-group">
            @Html.LabelForWithRequired(m => m.ConfirmPassword, new { @class = "control-label" })
            <div class="controls">
                @{
                    var confirmPwdHtmlAttribs = new Dictionary<string, object>
                                                                {
                        { "autocomplete", "off"}
                    };
                    if (!Model.ResetPassword)
                    {
                        confirmPwdHtmlAttribs["disabled"] = "disabled";
                    }
                }
                @Html.PasswordFor(m => m.ConfirmPassword, confirmPwdHtmlAttribs)
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(function () {
            $("#ResetPasswordDiv").on('switch-change', $.proxy(function (e, data) {
                var input = $(".resetPasswordGroup input");
                if (!data.value) {
                    input.val("");
                    input.removeAttr('aria-required');
                } else {
                    input.attr("aria-required", true);
                }
                input.prop("disabled", !data.value);
            }, this));
        });
    </script>

}
@Html.HiddenFor(m => m.EditMode)
@Html.HiddenFor(m => m.Accounts)
@Html.HiddenFor(m => m.AccountsChanged)

@if (Model.IsEligibleForMobileAppInvite)
{
    <div class="form-grid">
        <h2>@Html.Resource("SubHeading6")</h2>
        <div class="control-group">
            @if (Model.MobileAppError == null)
            {
                <p>@Html.Raw(Html.Resource("MobileAppInviteIntro"))</p>
                <div id="ssolink" class="well well-small monospace break-all">@Model.MobileAppDeepLink</div>
                <p><button type="submit" class="btn btn-submit" title="@Html.Resource("MobileAppInviteTooltip")" id="mobile-app-invite">@Html.Resource("MobileAppInvite")</button> <button type="button" class="btn" title="@Html.Resource("MobileAppLinkTooltip")" data-copytarget="ssolink">@Html.Resource("MobileAppCopyLink")</button> </p>
            }
            else
            {
                <div class="alert alert-warning">@Model.MobileAppError</div>
            }
        </div>
    </div>

    <script type="text/javascript">
        $(function() {
            $('#mobile-app-invite').on('click',
                function(e) {
                    e.preventDefault();

                    $(e.target).prop('disabled', true);

                    $.post('@Url.Action("SendInvite", "User", new { Id = Model.UserId })')
                        .done(function (d) {
                            if (d.isSuccess === true) {
                                ShowMessage.Success('@Html.Resource("MobileAppInviteSuccess")', false, '.navbar-inner');
                                return;
                            }

                            ShowMessage.Error(d.errorMessage, false, '.navbar-inner');
                        })
                        .always(function() {
                            $(e.target).prop('disabled', false);
                        });
                });

            $('[data-copytarget]').on('click',
                function (e) {
                    e.preventDefault();
                    var target = $(e.target).attr('data-copytarget');

                    try {
                        var range = document.createRange();
                        range.selectNode(document.getElementById(target));
                        window.getSelection().removeAllRanges();
                        window.getSelection().addRange(range);
                        document.execCommand("copy");
                        window.getSelection().removeAllRanges();

                        ShowMessage.Success('@Html.Resource("MobileAppLinkCopied")', false, '.navbar-inner');

                    } catch (err) {
                        console.log(err);
                    }
                });
        })
    </script>
}

<script type="text/javascript">

    $(function () {

        var dirtyHandler = new DirtyPageHandler({ form: $("#@Html.IdFor(m => m.FirstName)").closest("form") });

        var editUser = new EditUser({
            showAccountsGrid: @(Model.EditMode && Model.Accounts != null ? "true" : "false"),
            dataSource: JSON.parse(@Html.RawJsonString(Model.Accounts ?? "[]")),
            table: '#accountsgrid',
            pageSize: @MvcApplication.Settings.DefaultPageSize,
            sortColumn: 'name',
            rowTemplate: 'template-account-row',
            recordLabel: '@Html.Resource("RecordLabel").ToJavascriptSafeString()',
            deleteToolTip: '@Html.Resource("DeleteTooltip").ToJavascriptSafeString()',
            constructEntityCell: 'td.delete-label',
            detachModalHeader: '@Html.Resource("DetachAccountHeader").ToJavascriptSafeString()',
            detachModalBody: '@Html.Resource("DetachAccountBody").ToJavascriptSafeString()',
            detachModalButton: '@Html.GlobalResource("Detach").ToJavascriptSafeString()',
            accountsJsonField: '#@Html.IdFor(m => m.Accounts)',
            accountsChangedFlagField: '#@Html.IdFor(m => m.AccountsChanged)',
            checkUserInAd: @(Model.LoginProvider.CheckUserExists() ? "true" : "false"),
            checkUserInAdUsername: '#@Html.IdFor(m => m.Username)',
            checkUserInAdUrl: '@Url.Action("CheckUserInAd")',
            checkUserInAdUserFoundMessageSelector: '#UserFound'
        });



        var attachAccountPopup = new AttachAccountPopup({
            popupHeader: '@Html.Resource("AttachAccountHeading").ToJavascriptSafeString()',
            buttonCaption: '@Html.Resource("AttachAccountButton").ToJavascriptSafeString()',
            attachAccountButton: '.attach-account',
            popupTemplate: 'template-attach-account-popup',
            dataSourceUrl: '@Url.Action("ListAccountsForAttach", new { area = "admin" })',
            accountsGrid: '#attachAccountGrid',
            pageSize: @MvcApplication.Settings.DefaultAltPageSize,
            sortColumn: '@Columns.AccountName.ToJavascriptSafeString()',
            recordLabel: '@Html.Resource("RecordLabel").ToJavascriptSafeString()',
            pleaseSelectMessage: ".noSelectionMessage",
            pleaseSelectMessageHtml: '@( MvcHtmlString.Create(("<span class='error-text noSelectionMessage' style='display:none'>" + Html.Resource("PleaseSelectAccount") + "</span>").ToJavascriptSafeString()))',
            currentlyAttachedAccounts: $.proxy(function() {
                var exclude = "";
                for(var index=0; index < editUser._args.dataSource.length; index++ ){
                    if (exclude != "") {
                        exclude = exclude + ",";
                    }
                    exclude = exclude + editUser._args.dataSource[index].id;
                }
                return exclude;
            }, this),
            onSuccessfulAttach: function(item) {
                editUser._args.dataSource.push(item);
                editUser.storeCurrentAccounts();
                editUser.refreshGrid();
            }
        });


    });

</script>
