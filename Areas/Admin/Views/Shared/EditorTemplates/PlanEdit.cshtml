@using Cyara.Domain.Types.Common
@using Cyara.Domain.Types.TestCase
@using Cyara.Shared.Web.Extensions
@using Cyara.Web.Common.Extensions
@using Cyara.Web.Portal.Areas.Admin.Models
@using Cyara.Web.Portal.Core.Extensions
@model Cyara.Web.Portal.Areas.Admin.Models.PlanEditViewModel

<div class="control-group">
    @Html.LabelForWithRequired(m => m.Name, new { @class = "control-label" })
    <div class="controls">
        @Html.TextBoxFor(m => m.Name, new { @class = "input-xxlarge" })
        @Html.ValidationMessageFor(m => m.Name)
    </div>
</div>
<div class="control-group">
    @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
    <div class="controls">
        @Html.TextAreaFor(m => m.Notes, new { @class = "input-xxlarge" })
        @Html.ValidationMessageFor(m => m.Notes)
    </div>
</div>

<div class="row-fluid limit">
    <div class="control-group span4">
        @Html.LabelFor(m => m.MediaType, new { @class = "control-label" })
        @Html.TextBox("MediaTypeDisplay", Model.MediaType.ToLabel(),new { @readonly="readonly", @class = "input-medium" })
    </div>
    <div class="control-group span4">
        @Html.LabelFor(m => m.Plan, new { @class = "control-label" })
        @Html.TextBox("PlanTypeDisplay", Model.Plan, new { @readonly="readonly", @class = "input-medium"})
    </div>
</div>

@if ((Model.Requires & RequiredFields.SubType) == RequiredFields.SubType && Model.MediaType == MediaType.Voice)
{
    <div class="row-fluid limit">
        <div class="control-group span4">
            @Html.LabelFor(m => m.SubType, new { @class = "control-label" })
            <div class="controls">
                <label class="radio inline">
                    @Html.RadioButtonFor(m => m.SubType, ExchangeType.DTMF.ToString())
                    @Html.Resource("DTMF")
                </label>
                <label class="radio inline">
                    @Html.RadioButtonFor(m => m.SubType, ExchangeType.Speech.ToString())
                    @Html.Resource("Speech")
                </label>
            </div>
        </div>
    </div>
}
<div class="row-fluid limit">
    <div class="control-group span4">
        @Html.LabelForWithRequired(m => m.Start, new { @class = "control-label" })
        <div class="controls">
            <div id="@(Html.IdFor(m => m.Start))Picker" class="input-append">
                @Html.TextBoxFor(m => m.Start, new { @class = "input-datetime", data_format = @Model.DatePattern, @Value = Model.Start.HasValue ? Model.Start.Value.FormatToPickerDateTime() : string.Empty })
                <span class="add-on">
                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                </span>
            </div>
            @Html.ValidationMessageFor(m => m.Start)
        </div>
    </div>
    <div class="control-group span4">
        @Html.LabelForWithRequired(m => m.Expiry, new { @class = "control-label" })
        <div class="controls">
            <div id="@(Html.IdFor(m => m.Expiry))Picker" class="input-append">
                @Html.TextBoxFor(m => m.Expiry, new { @class = "input-datetime",@autocomplete="off", data_format = @Model.DatePattern, @Value = Model.Expiry.HasValue ? Model.Expiry.Value.FormatToPickerDateTime() : string.Empty })
                <span class="add-on">
                    <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                </span>
            </div>
            @Html.ValidationMessageFor(m => m.Expiry)
        </div>
    </div>
</div>
@if ((Model.Requires & RequiredFields.NotificationList) == RequiredFields.NotificationList)
{
    <div class="control-group">
        @Html.LabelFor(m => m.NotificationEmail, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.NotificationEmail, new { @class = "input-xxlarge" })
            @Html.Tooltip(Html.Resource("NotificationEmailTip"), Html.GlobalResource("TipLabel"))
            @Html.ValidationMessageFor(m => m.NotificationEmail)
        </div>
    </div>
}

<script type="text/javascript">
    $(function () {
        $('#@(Html.IdFor(m => m.Start))Picker').datetimepicker({ pickTime: true, pick12HourFormat: false, incrementHoursLabel: "@Html.GlobalResource("IncrementHoursLabel")", incrementMinutesLabel: "@Html.GlobalResource("IncrementMinutesLabel")", incrementSecondsLabel: "@Html.GlobalResource("IncrementSecondsLabel")", decrementHoursLabel: "@Html.GlobalResource("DecrementHoursLabel")", decrementMinutesLabel: "@Html.GlobalResource("DecrementMinutesLabel")", decrementSecondsLabel: "@Html.GlobalResource("DecrementSecondsLabel")" });
        $('#@(Html.IdFor(m => m.Expiry))Picker').datetimepicker({ pickTime: true, pick12HourFormat: false, incrementHoursLabel: "@Html.GlobalResource("IncrementHoursLabel")", incrementMinutesLabel: "@Html.GlobalResource("IncrementMinutesLabel")", incrementSecondsLabel: "@Html.GlobalResource("IncrementSecondsLabel")", decrementHoursLabel: "@Html.GlobalResource("DecrementHoursLabel")", decrementMinutesLabel: "@Html.GlobalResource("DecrementMinutesLabel")", decrementSecondsLabel: "@Html.GlobalResource("DecrementSecondsLabel")" });
    });
</script>

@if (Model.ReadOnly)
{
<script type="text/javascript">
        $(function () {
            $('input, select, textarea').prop('disabled', true);
            $('#@(Html.IdFor(m => m.Start))Picker').data('datetimepicker').disable();
            $('#@(Html.IdFor(m => m.Expiry))Picker').data('datetimepicker').disable();
        });
</script>
}
