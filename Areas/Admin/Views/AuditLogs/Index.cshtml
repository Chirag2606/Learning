@using Cyara.Shared.Extensions
@using Cyara.Shared.Web.Extensions
@using Cyara.Shared.Web.Types.Constants
@using Cyara.Web.Common.Extensions
@using Cyara.Web.Portal.Areas.Admin.Models
@model  Cyara.Web.Portal.Areas.Admin.Models.AuditLogsViewModel
@{
    ViewBag.Title = Html.Resource("Title");
}

@section PageHead
{
    @Html.PageHeader(Html.Resource("PageHead"))
}

@section PageHeadRight
{
    @{
        Html.RenderPartial("ServerTimeUtc");
    }
}

@section PageContent
{
    <div class="overlap">
        <div class="form">
            <div class="form-head">
                <h2>@Html.Resource("SubHeading")</h2>
            </div>

            @using (Html.BeginForm("Index", "AuditLogs", null, FormMethod.Post, new { id = "getauditlog" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-body">
                    <div class="row-fluid">
                        <div class="span5">
                            <div class="row-fluid">
                                <div class="span6">
                                    @Html.LabelForWithRequired(m => m.From, new { @class = "control-label" })
                                    <div class="control-group">
                                        <div id="@(Html.IdFor(m => m.From))Picker" class="input-append">
                                            @Html.TextBoxFor(m => m.From, new { @class = "input-datetime", data_format = @Model.DatePattern, @Value = Model.From.FormatToPickerDateTime() })
                                            <span class="add-on">
                                                <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                                            </span>
                                            <span class="add-on disabled-datepicker" style="display: none;">
                                                <i class="icon-calendar"></i>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.From)
                                    </div>
                                </div>
                                <div class="span6">
                                    @Html.LabelFor(m => m.Category, new { @class = "control-label" })
                                    <div class="control-group">
                                        @Html.DropDownListFor(m => m.Category, Model.Categories, new { @class = "input-large" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Category)
                                </div>
                            </div>
                        </div>
                        <div class="span7">
                            <div class="row-fluid">
                                <div class="span7">
                                    @Html.LabelFor(m => m.UserName, new { @class = "control-label" })
                                    <div class="control-group">
                                        @Html.DropDownListFor(m => m.UserName, Model.AllUsers, new { @class = "" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.UserName)
                                </div>
                                <div class="span5">
                                    @Html.LabelFor(m => m.AccountName, new { @class = "control-label" })
                                    <div class="control-group">
                                        @Html.DropDownListFor(m => m.AccountName, Model.AllAccounts, new { @class = "" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.AccountName)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <div class="span5">
                            <div class="row-fluid">
                                <div class="span6">
                                    @Html.LabelForWithRequired(m => m.To, new { @class = "control-label" })
                                    <div class="control-group">
                                        <div id="@(Html.IdFor(m => m.To))Picker" class="input-append">
                                            @Html.TextBoxFor(m => m.To, new { @class = "input-datetime", data_format = @Model.DatePattern, @Value = Model.To.FormatToPickerDateTime() })
                                            <span class="add-on">
                                                <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                                            </span>
                                            <span class="add-on disabled-datepicker" style="display: none;">
                                                <i class="icon-calendar"></i>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.To)
                                    </div>
                                </div>
                                <div class="span6">
                                    @Html.LabelFor(m => m.SubCategory, new { @class = "control-label" })
                                    <div class="control-group">
                                        @Html.DropDownListFor(m => m.SubCategory, Enumerable.Empty<SelectListItem>(), new { @class = "input-large" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SubCategory)
                                </div>
                            </div>
                        </div>
                        <div class="span7">
                            <div class="row-fluid">
                                <div class="span6">
                                    @Html.LabelFor(m => m.UserId, new { @class = "control-label" })
                                    <div class="control-group">
                                        @Html.TextBoxFor(m => m.UserId, new { @class = "input-xlargePlus" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.UserId)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <button name="@Html.NameFor(m => m.Action)" value="@AuditLogsViewModel.SubmitAction.Update" type="submit" class="btn btn-primary btn-submit">@Html.Resource("Filter")</button>
                    <button name="@Html.NameFor(m => m.Action)" value="@AuditLogsViewModel.SubmitAction.Export" type="submit" class="btn btn-primary">@Html.Resource("Export")</button>
                </div>
            }


            <table id="journalGrid" class="table table-striped table-hover finger truncated expand-active-row">
                <colgroup>
                    <col style="width: 10%"/>
                    <col style="width: 10%"/>
                    <col style="width: 10%" />
                    <col style="width: 8%"/>
                    <col style="width: 10%"/>
                    <col style="width: 7%"/>
                    <col style="width: 10%"/>
                    <col style="width: 8%"/>
                    <col style="width: 8%"/>
                    <col/>
                </colgroup>
                <thead>
                <tr>
                    <th data-sort="@Columns.Date"><a href="#">@Html.GlobalResource("TableHeading_DateUTC")</a></th>
                    <th>@Html.GlobalResource("TableHeading_UserId")</th>
                    <th>@Html.GlobalResource("TableHeading_Username")</th>
                    <th data-sort="@Columns.Category"><a href="#">@Html.GlobalResource("TableHeading_Category")</a></th>
                    <th data-sort="@Columns.Subcategory"><a href="#">@Html.GlobalResource("TableHeading_SubCategory")</a></th>
                    <th>@Html.GlobalResource("TableHeading_Result")</th>
                    <th>@Html.GlobalResource("TableHeading_AccountName")</th>
                    <th>@Html.GlobalResource("TableHeading_Session")</th>
                    <th>@Html.GlobalResource("TableHeading_IPAddress")</th>
                    <th>@Html.GlobalResource("TableHeading_Details")</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var entry in Model.Collection)
                {
                    <tr data-journalid="@entry.JournalId">
                        <td class="truncate">@entry.DateCreated</td>
                        <td class="truncate">@entry.UserId</td>
                        <td class="truncate">@entry.Username</td>
                        <td class="truncate">@entry.Category</td>
                        <td class="truncate">@entry.SubCategory</td>
                        <td class="truncate">@entry.Result</td>
                        <td class="truncate">@entry.AccountName</td>
                        <td class="truncate">@entry.SessionId</td>
                        <td class="truncate">@entry.IpAddress</td>
                        <td class="truncate">@entry.Detail</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <script id="template-row" type="text/x-tmpl">
            <tr data-journalid="{%= o.journalId %}">
                <td class="truncate">{%= o.dateCreated %}</td>
                <td class="truncate">{%= o.userId %}</td>
                <td class="truncate">{%= o.username %}</td>
                <td class="truncate">{%= o.category %}</td>
                <td class="truncate">{%= o.subCategory %}</td>
                <td class="truncate">{%= o.result %}</td>
                <td class="truncate">{%= o.accountName %}</td>
                <td class="truncate">{%= o.sessionId %}</td>
                <td class="truncate">{%= o.ipAddress %}</td>
                <td class="truncate">{%= o.detail %}</td>
            </tr>
        </script>

    <script type="text/javascript">

            $(function() {
                $('.input-datetime').closest('.input-append').datetimepicker({ pickTime: true, pick12HourFormat: false, incrementHoursLabel: "@Html.GlobalResource("IncrementHoursLabel")", incrementMinutesLabel: "@Html.GlobalResource("IncrementMinutesLabel")", incrementSecondsLabel: "@Html.GlobalResource("IncrementSecondsLabel")", decrementHoursLabel: "@Html.GlobalResource("DecrementHoursLabel")", decrementMinutesLabel: "@Html.GlobalResource("DecrementMinutesLabel")", decrementSecondsLabel: "@Html.GlobalResource("DecrementSecondsLabel")" });

                var json = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AllCategoriesAsJson)));
                var categories = JSON.parse(json);
                var selectedSubcategory = "@Model.SubCategory"; // remember selected subcategory on postback

                $('#@Html.IdFor(m => m.Category)').on('change', function() {

                    var subcategories = categories[$(this).val()];
                    var html = '<option value=""></option>';
                    $(subcategories).each(function() {
                        var subcategory = htmlEncode(this);
                        html += '<option {0} value={1} >{2}</option>'.format((subcategory == selectedSubcategory) ? ' selected="selected"' : '', subcategory, subcategory);
                    });

                    $("#@Html.IdFor(m => m.SubCategory)").html(html);
                    selectedSubcategory = ""; // reset it, so any further change in Category will clear selected Subcategory
                });

                var userIdWhenUsernameIsEmpty = "@Model.UserId"; // userId coming from postback
                $('#@Html.IdFor(m => m.UserName)').on('change', function() {
                    var selectedUserId = $(this).val();
                    var userIdTextBox = $("#@Html.IdFor(m => m.UserId)");
                    if (selectedUserId === "") {
                        userIdTextBox.prop("disabled", false);
                        userIdTextBox.val(userIdWhenUsernameIsEmpty); // username is empty, so either clear UserId field or, if this is on postback, populate it with UserId that came back with model
                    } else {
                        userIdTextBox.prop("disabled", true);
                        userIdTextBox.val(selectedUserId);
                    }

                    userIdWhenUsernameIsEmpty = ""; // reset it, so if username is cleared, the javascript will immediately clear selected userId
                });

                $('#@Html.IdFor(m => m.Category)').change(); // manually call it once on postback
                $('#@Html.IdFor(m => m.UserName)').change(); // manually call it once on postback

                var grid = new AjaxGrid({
                    dataSourceUrl: '@Url.Action("ListJournalRecords")',
                    table: '#journalGrid',
                    totalPages: @Model.TotalPages,
                    collectionSize: @Model.CollectionSize,
                    pageSize: @Model.PageSize,
                    pageNumber: @Model.PageNumber,
                    sortColumn: '@Model.SortColumn.ToJavascriptSafeString()',
                    sortAscending: @Model.SortAscending.ToString().ToLower(),
                    rowTemplate: 'template-row',
                    recordLabel: '@Html.Resource("RecordLabel").ToJavascriptSafeString()',
                    requestPreProcessor: function(request) {
                        request.@(Html.NameFor(m => m.Category)) = $('#@Html.IdFor(m => m.Category)').val();
                        request.@(Html.NameFor(m => m.SubCategory)) = $('#@Html.IdFor(m => m.SubCategory)').val();
                        request.@(Html.NameFor(m => m.From)) = $('#@Html.IdFor(m => m.From)').val();
                        request.@(Html.NameFor(m => m.To)) = $('#@Html.IdFor(m => m.To)').val();
                        request.@(Html.NameFor(m => m.AccountName)) = $('#@Html.IdFor(m => m.AccountName)').val();
                        request.@(Html.NameFor(m => m.UserName)) = $('#@Html.IdFor(m => m.UserName)').val();
                        request.@(Html.NameFor(m => m.UserId)) = $('#@Html.IdFor(m => m.UserId)').val();
                    }
                });
            });

    </script>
}
